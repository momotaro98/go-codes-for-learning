// Code generated by SQLBoiler 3.7.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testOccupations(t *testing.T) {
	t.Parallel()

	query := Occupations()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testOccupationsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Occupation{}
	if err = randomize.Struct(seed, o, occupationDBTypes, true, occupationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Occupation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Occupations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testOccupationsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Occupation{}
	if err = randomize.Struct(seed, o, occupationDBTypes, true, occupationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Occupation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Occupations().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Occupations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testOccupationsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Occupation{}
	if err = randomize.Struct(seed, o, occupationDBTypes, true, occupationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Occupation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := OccupationSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Occupations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testOccupationsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Occupation{}
	if err = randomize.Struct(seed, o, occupationDBTypes, true, occupationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Occupation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := OccupationExists(ctx, tx, o.OccupationId)
	if err != nil {
		t.Errorf("Unable to check if Occupation exists: %s", err)
	}
	if !e {
		t.Errorf("Expected OccupationExists to return true, but got false.")
	}
}

func testOccupationsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Occupation{}
	if err = randomize.Struct(seed, o, occupationDBTypes, true, occupationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Occupation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	occupationFound, err := FindOccupation(ctx, tx, o.OccupationId)
	if err != nil {
		t.Error(err)
	}

	if occupationFound == nil {
		t.Error("want a record, got nil")
	}
}

func testOccupationsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Occupation{}
	if err = randomize.Struct(seed, o, occupationDBTypes, true, occupationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Occupation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Occupations().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testOccupationsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Occupation{}
	if err = randomize.Struct(seed, o, occupationDBTypes, true, occupationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Occupation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Occupations().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testOccupationsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	occupationOne := &Occupation{}
	occupationTwo := &Occupation{}
	if err = randomize.Struct(seed, occupationOne, occupationDBTypes, false, occupationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Occupation struct: %s", err)
	}
	if err = randomize.Struct(seed, occupationTwo, occupationDBTypes, false, occupationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Occupation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = occupationOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = occupationTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Occupations().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testOccupationsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	occupationOne := &Occupation{}
	occupationTwo := &Occupation{}
	if err = randomize.Struct(seed, occupationOne, occupationDBTypes, false, occupationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Occupation struct: %s", err)
	}
	if err = randomize.Struct(seed, occupationTwo, occupationDBTypes, false, occupationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Occupation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = occupationOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = occupationTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Occupations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func occupationBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Occupation) error {
	*o = Occupation{}
	return nil
}

func occupationAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Occupation) error {
	*o = Occupation{}
	return nil
}

func occupationAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Occupation) error {
	*o = Occupation{}
	return nil
}

func occupationBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Occupation) error {
	*o = Occupation{}
	return nil
}

func occupationAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Occupation) error {
	*o = Occupation{}
	return nil
}

func occupationBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Occupation) error {
	*o = Occupation{}
	return nil
}

func occupationAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Occupation) error {
	*o = Occupation{}
	return nil
}

func occupationBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Occupation) error {
	*o = Occupation{}
	return nil
}

func occupationAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Occupation) error {
	*o = Occupation{}
	return nil
}

func testOccupationsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Occupation{}
	o := &Occupation{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, occupationDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Occupation object: %s", err)
	}

	AddOccupationHook(boil.BeforeInsertHook, occupationBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	occupationBeforeInsertHooks = []OccupationHook{}

	AddOccupationHook(boil.AfterInsertHook, occupationAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	occupationAfterInsertHooks = []OccupationHook{}

	AddOccupationHook(boil.AfterSelectHook, occupationAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	occupationAfterSelectHooks = []OccupationHook{}

	AddOccupationHook(boil.BeforeUpdateHook, occupationBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	occupationBeforeUpdateHooks = []OccupationHook{}

	AddOccupationHook(boil.AfterUpdateHook, occupationAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	occupationAfterUpdateHooks = []OccupationHook{}

	AddOccupationHook(boil.BeforeDeleteHook, occupationBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	occupationBeforeDeleteHooks = []OccupationHook{}

	AddOccupationHook(boil.AfterDeleteHook, occupationAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	occupationAfterDeleteHooks = []OccupationHook{}

	AddOccupationHook(boil.BeforeUpsertHook, occupationBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	occupationBeforeUpsertHooks = []OccupationHook{}

	AddOccupationHook(boil.AfterUpsertHook, occupationAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	occupationAfterUpsertHooks = []OccupationHook{}
}

func testOccupationsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Occupation{}
	if err = randomize.Struct(seed, o, occupationDBTypes, true, occupationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Occupation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Occupations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testOccupationsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Occupation{}
	if err = randomize.Struct(seed, o, occupationDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Occupation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(occupationColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Occupations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testOccupationsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Occupation{}
	if err = randomize.Struct(seed, o, occupationDBTypes, true, occupationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Occupation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testOccupationsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Occupation{}
	if err = randomize.Struct(seed, o, occupationDBTypes, true, occupationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Occupation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := OccupationSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testOccupationsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Occupation{}
	if err = randomize.Struct(seed, o, occupationDBTypes, true, occupationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Occupation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Occupations().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	occupationDBTypes = map[string]string{`OccupationId`: `smallint`, `Name`: `varchar`, `CreatedAt`: `datetime`, `UpdatedAt`: `datetime`}
	_                 = bytes.MinRead
)

func testOccupationsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(occupationPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(occupationAllColumns) == len(occupationPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Occupation{}
	if err = randomize.Struct(seed, o, occupationDBTypes, true, occupationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Occupation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Occupations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, occupationDBTypes, true, occupationPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Occupation struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testOccupationsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(occupationAllColumns) == len(occupationPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Occupation{}
	if err = randomize.Struct(seed, o, occupationDBTypes, true, occupationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Occupation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Occupations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, occupationDBTypes, true, occupationPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Occupation struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(occupationAllColumns, occupationPrimaryKeyColumns) {
		fields = occupationAllColumns
	} else {
		fields = strmangle.SetComplement(
			occupationAllColumns,
			occupationPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := OccupationSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testOccupationsUpsert(t *testing.T) {
	t.Parallel()

	if len(occupationAllColumns) == len(occupationPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLOccupationUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Occupation{}
	if err = randomize.Struct(seed, &o, occupationDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Occupation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Occupation: %s", err)
	}

	count, err := Occupations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, occupationDBTypes, false, occupationPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Occupation struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Occupation: %s", err)
	}

	count, err = Occupations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
