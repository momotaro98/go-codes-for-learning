// Code generated by SQLBoiler 3.7.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// Userlocation is an object representing the database table.
type Userlocation struct {
	UserId    string    `boil:"userId" json:"userId" toml:"userId" yaml:"userId"`
	Latitude  float64   `boil:"latitude" json:"latitude" toml:"latitude" yaml:"latitude"`
	Longitude float64   `boil:"longitude" json:"longitude" toml:"longitude" yaml:"longitude"`
	CreatedAt time.Time `boil:"createdAt" json:"createdAt" toml:"createdAt" yaml:"createdAt"`
	UpdatedAt time.Time `boil:"updatedAt" json:"updatedAt" toml:"updatedAt" yaml:"updatedAt"`

	R *userlocationR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L userlocationL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var UserlocationColumns = struct {
	UserId    string
	Latitude  string
	Longitude string
	CreatedAt string
	UpdatedAt string
}{
	UserId:    "userId",
	Latitude:  "latitude",
	Longitude: "longitude",
	CreatedAt: "createdAt",
	UpdatedAt: "updatedAt",
}

// Generated where

type whereHelperstring struct{ field string }

func (w whereHelperstring) EQ(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperstring) NEQ(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperstring) LT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperstring) LTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperstring) GT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperstring) GTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperstring) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}

type whereHelperfloat64 struct{ field string }

func (w whereHelperfloat64) EQ(x float64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperfloat64) NEQ(x float64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelperfloat64) LT(x float64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperfloat64) LTE(x float64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelperfloat64) GT(x float64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperfloat64) GTE(x float64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelperfloat64) IN(slice []float64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}

var UserlocationWhere = struct {
	UserId    whereHelperstring
	Latitude  whereHelperfloat64
	Longitude whereHelperfloat64
	CreatedAt whereHelpertime_Time
	UpdatedAt whereHelpertime_Time
}{
	UserId:    whereHelperstring{field: "`userlocations`.`userId`"},
	Latitude:  whereHelperfloat64{field: "`userlocations`.`latitude`"},
	Longitude: whereHelperfloat64{field: "`userlocations`.`longitude`"},
	CreatedAt: whereHelpertime_Time{field: "`userlocations`.`createdAt`"},
	UpdatedAt: whereHelpertime_Time{field: "`userlocations`.`updatedAt`"},
}

// UserlocationRels is where relationship names are stored.
var UserlocationRels = struct {
	UserId string
}{
	UserId: "UserId",
}

// userlocationR is where relationships are stored.
type userlocationR struct {
	UserId *User
}

// NewStruct creates a new relationship struct
func (*userlocationR) NewStruct() *userlocationR {
	return &userlocationR{}
}

// userlocationL is where Load methods for each relationship are stored.
type userlocationL struct{}

var (
	userlocationAllColumns            = []string{"userId", "latitude", "longitude", "createdAt", "updatedAt"}
	userlocationColumnsWithoutDefault = []string{"userId", "latitude", "longitude"}
	userlocationColumnsWithDefault    = []string{"createdAt", "updatedAt"}
	userlocationPrimaryKeyColumns     = []string{"userId"}
)

type (
	// UserlocationSlice is an alias for a slice of pointers to Userlocation.
	// This should generally be used opposed to []Userlocation.
	UserlocationSlice []*Userlocation
	// UserlocationHook is the signature for custom Userlocation hook methods
	UserlocationHook func(context.Context, boil.ContextExecutor, *Userlocation) error

	userlocationQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	userlocationType                 = reflect.TypeOf(&Userlocation{})
	userlocationMapping              = queries.MakeStructMapping(userlocationType)
	userlocationPrimaryKeyMapping, _ = queries.BindMapping(userlocationType, userlocationMapping, userlocationPrimaryKeyColumns)
	userlocationInsertCacheMut       sync.RWMutex
	userlocationInsertCache          = make(map[string]insertCache)
	userlocationUpdateCacheMut       sync.RWMutex
	userlocationUpdateCache          = make(map[string]updateCache)
	userlocationUpsertCacheMut       sync.RWMutex
	userlocationUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var userlocationBeforeInsertHooks []UserlocationHook
var userlocationBeforeUpdateHooks []UserlocationHook
var userlocationBeforeDeleteHooks []UserlocationHook
var userlocationBeforeUpsertHooks []UserlocationHook

var userlocationAfterInsertHooks []UserlocationHook
var userlocationAfterSelectHooks []UserlocationHook
var userlocationAfterUpdateHooks []UserlocationHook
var userlocationAfterDeleteHooks []UserlocationHook
var userlocationAfterUpsertHooks []UserlocationHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Userlocation) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userlocationBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Userlocation) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userlocationBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Userlocation) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userlocationBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Userlocation) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userlocationBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Userlocation) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userlocationAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Userlocation) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userlocationAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Userlocation) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userlocationAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Userlocation) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userlocationAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Userlocation) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userlocationAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddUserlocationHook registers your hook function for all future operations.
func AddUserlocationHook(hookPoint boil.HookPoint, userlocationHook UserlocationHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		userlocationBeforeInsertHooks = append(userlocationBeforeInsertHooks, userlocationHook)
	case boil.BeforeUpdateHook:
		userlocationBeforeUpdateHooks = append(userlocationBeforeUpdateHooks, userlocationHook)
	case boil.BeforeDeleteHook:
		userlocationBeforeDeleteHooks = append(userlocationBeforeDeleteHooks, userlocationHook)
	case boil.BeforeUpsertHook:
		userlocationBeforeUpsertHooks = append(userlocationBeforeUpsertHooks, userlocationHook)
	case boil.AfterInsertHook:
		userlocationAfterInsertHooks = append(userlocationAfterInsertHooks, userlocationHook)
	case boil.AfterSelectHook:
		userlocationAfterSelectHooks = append(userlocationAfterSelectHooks, userlocationHook)
	case boil.AfterUpdateHook:
		userlocationAfterUpdateHooks = append(userlocationAfterUpdateHooks, userlocationHook)
	case boil.AfterDeleteHook:
		userlocationAfterDeleteHooks = append(userlocationAfterDeleteHooks, userlocationHook)
	case boil.AfterUpsertHook:
		userlocationAfterUpsertHooks = append(userlocationAfterUpsertHooks, userlocationHook)
	}
}

// One returns a single userlocation record from the query.
func (q userlocationQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Userlocation, error) {
	o := &Userlocation{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for userlocations")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Userlocation records from the query.
func (q userlocationQuery) All(ctx context.Context, exec boil.ContextExecutor) (UserlocationSlice, error) {
	var o []*Userlocation

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Userlocation slice")
	}

	if len(userlocationAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Userlocation records in the query.
func (q userlocationQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count userlocations rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q userlocationQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if userlocations exists")
	}

	return count > 0, nil
}

// UserId pointed to by the foreign key.
func (o *Userlocation) UserId(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`userId` = ?", o.UserId),
	}

	queryMods = append(queryMods, mods...)

	query := Users(queryMods...)
	queries.SetFrom(query.Query, "`users`")

	return query
}

// LoadUserId allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (userlocationL) LoadUserId(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUserlocation interface{}, mods queries.Applicator) error {
	var slice []*Userlocation
	var object *Userlocation

	if singular {
		object = maybeUserlocation.(*Userlocation)
	} else {
		slice = *maybeUserlocation.(*[]*Userlocation)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &userlocationR{}
		}
		args = append(args, object.UserId)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userlocationR{}
			}

			for _, a := range args {
				if a == obj.UserId {
					continue Outer
				}
			}

			args = append(args, obj.UserId)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`users`), qm.WhereIn(`users.userId in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(userlocationAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.UserId = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.UserIdUserlocation = object
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UserId == foreign.UserId {
				local.R.UserId = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.UserIdUserlocation = local
				break
			}
		}
	}

	return nil
}

// SetUserId of the userlocation to the related item.
// Sets o.R.UserId to related.
// Adds o to related.R.UserIdUserlocation.
func (o *Userlocation) SetUserId(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `userlocations` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"userId"}),
		strmangle.WhereClause("`", "`", 0, userlocationPrimaryKeyColumns),
	)
	values := []interface{}{related.UserId, o.UserId}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UserId = related.UserId
	if o.R == nil {
		o.R = &userlocationR{
			UserId: related,
		}
	} else {
		o.R.UserId = related
	}

	if related.R == nil {
		related.R = &userR{
			UserIdUserlocation: o,
		}
	} else {
		related.R.UserIdUserlocation = o
	}

	return nil
}

// Userlocations retrieves all the records using an executor.
func Userlocations(mods ...qm.QueryMod) userlocationQuery {
	mods = append(mods, qm.From("`userlocations`"))
	return userlocationQuery{NewQuery(mods...)}
}

// FindUserlocation retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindUserlocation(ctx context.Context, exec boil.ContextExecutor, userId string, selectCols ...string) (*Userlocation, error) {
	userlocationObj := &Userlocation{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `userlocations` where `userId`=?", sel,
	)

	q := queries.Raw(query, userId)

	err := q.Bind(ctx, exec, userlocationObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from userlocations")
	}

	return userlocationObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Userlocation) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no userlocations provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(userlocationColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	userlocationInsertCacheMut.RLock()
	cache, cached := userlocationInsertCache[key]
	userlocationInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			userlocationAllColumns,
			userlocationColumnsWithDefault,
			userlocationColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(userlocationType, userlocationMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(userlocationType, userlocationMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `userlocations` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `userlocations` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `userlocations` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, userlocationPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into userlocations")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.UserId,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for userlocations")
	}

CacheNoHooks:
	if !cached {
		userlocationInsertCacheMut.Lock()
		userlocationInsertCache[key] = cache
		userlocationInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Userlocation.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Userlocation) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	userlocationUpdateCacheMut.RLock()
	cache, cached := userlocationUpdateCache[key]
	userlocationUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			userlocationAllColumns,
			userlocationPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update userlocations, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `userlocations` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, userlocationPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(userlocationType, userlocationMapping, append(wl, userlocationPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update userlocations row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for userlocations")
	}

	if !cached {
		userlocationUpdateCacheMut.Lock()
		userlocationUpdateCache[key] = cache
		userlocationUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q userlocationQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for userlocations")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for userlocations")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o UserlocationSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userlocationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `userlocations` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, userlocationPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in userlocation slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all userlocation")
	}
	return rowsAff, nil
}

var mySQLUserlocationUniqueColumns = []string{
	"userId",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Userlocation) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no userlocations provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(userlocationColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLUserlocationUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	userlocationUpsertCacheMut.RLock()
	cache, cached := userlocationUpsertCache[key]
	userlocationUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			userlocationAllColumns,
			userlocationColumnsWithDefault,
			userlocationColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			userlocationAllColumns,
			userlocationPrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("models: unable to upsert userlocations, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "userlocations", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `userlocations` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(userlocationType, userlocationMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(userlocationType, userlocationMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for userlocations")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(userlocationType, userlocationMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for userlocations")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for userlocations")
	}

CacheNoHooks:
	if !cached {
		userlocationUpsertCacheMut.Lock()
		userlocationUpsertCache[key] = cache
		userlocationUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Userlocation record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Userlocation) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Userlocation provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), userlocationPrimaryKeyMapping)
	sql := "DELETE FROM `userlocations` WHERE `userId`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from userlocations")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for userlocations")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q userlocationQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no userlocationQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from userlocations")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for userlocations")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o UserlocationSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(userlocationBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userlocationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `userlocations` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, userlocationPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from userlocation slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for userlocations")
	}

	if len(userlocationAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Userlocation) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindUserlocation(ctx, exec, o.UserId)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *UserlocationSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := UserlocationSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userlocationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `userlocations`.* FROM `userlocations` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, userlocationPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in UserlocationSlice")
	}

	*o = slice

	return nil
}

// UserlocationExists checks if the Userlocation row exists.
func UserlocationExists(ctx context.Context, exec boil.ContextExecutor, userId string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `userlocations` where `userId`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, userId)
	}
	row := exec.QueryRowContext(ctx, sql, userId)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if userlocations exists")
	}

	return exists, nil
}
