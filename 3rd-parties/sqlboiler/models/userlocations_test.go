// Code generated by SQLBoiler 3.7.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testUserlocations(t *testing.T) {
	t.Parallel()

	query := Userlocations()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testUserlocationsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Userlocation{}
	if err = randomize.Struct(seed, o, userlocationDBTypes, true, userlocationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Userlocation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Userlocations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testUserlocationsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Userlocation{}
	if err = randomize.Struct(seed, o, userlocationDBTypes, true, userlocationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Userlocation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Userlocations().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Userlocations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testUserlocationsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Userlocation{}
	if err = randomize.Struct(seed, o, userlocationDBTypes, true, userlocationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Userlocation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := UserlocationSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Userlocations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testUserlocationsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Userlocation{}
	if err = randomize.Struct(seed, o, userlocationDBTypes, true, userlocationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Userlocation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := UserlocationExists(ctx, tx, o.UserId)
	if err != nil {
		t.Errorf("Unable to check if Userlocation exists: %s", err)
	}
	if !e {
		t.Errorf("Expected UserlocationExists to return true, but got false.")
	}
}

func testUserlocationsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Userlocation{}
	if err = randomize.Struct(seed, o, userlocationDBTypes, true, userlocationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Userlocation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	userlocationFound, err := FindUserlocation(ctx, tx, o.UserId)
	if err != nil {
		t.Error(err)
	}

	if userlocationFound == nil {
		t.Error("want a record, got nil")
	}
}

func testUserlocationsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Userlocation{}
	if err = randomize.Struct(seed, o, userlocationDBTypes, true, userlocationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Userlocation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Userlocations().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testUserlocationsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Userlocation{}
	if err = randomize.Struct(seed, o, userlocationDBTypes, true, userlocationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Userlocation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Userlocations().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testUserlocationsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	userlocationOne := &Userlocation{}
	userlocationTwo := &Userlocation{}
	if err = randomize.Struct(seed, userlocationOne, userlocationDBTypes, false, userlocationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Userlocation struct: %s", err)
	}
	if err = randomize.Struct(seed, userlocationTwo, userlocationDBTypes, false, userlocationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Userlocation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = userlocationOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = userlocationTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Userlocations().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testUserlocationsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	userlocationOne := &Userlocation{}
	userlocationTwo := &Userlocation{}
	if err = randomize.Struct(seed, userlocationOne, userlocationDBTypes, false, userlocationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Userlocation struct: %s", err)
	}
	if err = randomize.Struct(seed, userlocationTwo, userlocationDBTypes, false, userlocationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Userlocation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = userlocationOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = userlocationTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Userlocations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func userlocationBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Userlocation) error {
	*o = Userlocation{}
	return nil
}

func userlocationAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Userlocation) error {
	*o = Userlocation{}
	return nil
}

func userlocationAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Userlocation) error {
	*o = Userlocation{}
	return nil
}

func userlocationBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Userlocation) error {
	*o = Userlocation{}
	return nil
}

func userlocationAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Userlocation) error {
	*o = Userlocation{}
	return nil
}

func userlocationBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Userlocation) error {
	*o = Userlocation{}
	return nil
}

func userlocationAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Userlocation) error {
	*o = Userlocation{}
	return nil
}

func userlocationBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Userlocation) error {
	*o = Userlocation{}
	return nil
}

func userlocationAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Userlocation) error {
	*o = Userlocation{}
	return nil
}

func testUserlocationsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Userlocation{}
	o := &Userlocation{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, userlocationDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Userlocation object: %s", err)
	}

	AddUserlocationHook(boil.BeforeInsertHook, userlocationBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	userlocationBeforeInsertHooks = []UserlocationHook{}

	AddUserlocationHook(boil.AfterInsertHook, userlocationAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	userlocationAfterInsertHooks = []UserlocationHook{}

	AddUserlocationHook(boil.AfterSelectHook, userlocationAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	userlocationAfterSelectHooks = []UserlocationHook{}

	AddUserlocationHook(boil.BeforeUpdateHook, userlocationBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	userlocationBeforeUpdateHooks = []UserlocationHook{}

	AddUserlocationHook(boil.AfterUpdateHook, userlocationAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	userlocationAfterUpdateHooks = []UserlocationHook{}

	AddUserlocationHook(boil.BeforeDeleteHook, userlocationBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	userlocationBeforeDeleteHooks = []UserlocationHook{}

	AddUserlocationHook(boil.AfterDeleteHook, userlocationAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	userlocationAfterDeleteHooks = []UserlocationHook{}

	AddUserlocationHook(boil.BeforeUpsertHook, userlocationBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	userlocationBeforeUpsertHooks = []UserlocationHook{}

	AddUserlocationHook(boil.AfterUpsertHook, userlocationAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	userlocationAfterUpsertHooks = []UserlocationHook{}
}

func testUserlocationsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Userlocation{}
	if err = randomize.Struct(seed, o, userlocationDBTypes, true, userlocationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Userlocation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Userlocations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testUserlocationsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Userlocation{}
	if err = randomize.Struct(seed, o, userlocationDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Userlocation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(userlocationColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Userlocations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testUserlocationToOneUserUsingUserId(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Userlocation
	var foreign User

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, userlocationDBTypes, false, userlocationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Userlocation struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, userDBTypes, false, userColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize User struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.UserId = foreign.UserId
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.UserId().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.UserId != foreign.UserId {
		t.Errorf("want: %v, got %v", foreign.UserId, check.UserId)
	}

	slice := UserlocationSlice{&local}
	if err = local.L.LoadUserId(ctx, tx, false, (*[]*Userlocation)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.UserId == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.UserId = nil
	if err = local.L.LoadUserId(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.UserId == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testUserlocationToOneSetOpUserUsingUserId(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Userlocation
	var b, c User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, userlocationDBTypes, false, strmangle.SetComplement(userlocationPrimaryKeyColumns, userlocationColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*User{&b, &c} {
		err = a.SetUserId(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.UserId != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.UserIdUserlocation != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.UserId != x.UserId {
			t.Error("foreign key was wrong value", a.UserId)
		}

		if exists, err := UserlocationExists(ctx, tx, a.UserId); err != nil {
			t.Fatal(err)
		} else if !exists {
			t.Error("want 'a' to exist")
		}

	}
}

func testUserlocationsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Userlocation{}
	if err = randomize.Struct(seed, o, userlocationDBTypes, true, userlocationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Userlocation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testUserlocationsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Userlocation{}
	if err = randomize.Struct(seed, o, userlocationDBTypes, true, userlocationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Userlocation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := UserlocationSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testUserlocationsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Userlocation{}
	if err = randomize.Struct(seed, o, userlocationDBTypes, true, userlocationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Userlocation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Userlocations().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	userlocationDBTypes = map[string]string{`UserId`: `char`, `Latitude`: `double`, `Longitude`: `double`, `CreatedAt`: `datetime`, `UpdatedAt`: `datetime`}
	_                   = bytes.MinRead
)

func testUserlocationsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(userlocationPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(userlocationAllColumns) == len(userlocationPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Userlocation{}
	if err = randomize.Struct(seed, o, userlocationDBTypes, true, userlocationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Userlocation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Userlocations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, userlocationDBTypes, true, userlocationPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Userlocation struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testUserlocationsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(userlocationAllColumns) == len(userlocationPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Userlocation{}
	if err = randomize.Struct(seed, o, userlocationDBTypes, true, userlocationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Userlocation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Userlocations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, userlocationDBTypes, true, userlocationPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Userlocation struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(userlocationAllColumns, userlocationPrimaryKeyColumns) {
		fields = userlocationAllColumns
	} else {
		fields = strmangle.SetComplement(
			userlocationAllColumns,
			userlocationPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := UserlocationSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testUserlocationsUpsert(t *testing.T) {
	t.Parallel()

	if len(userlocationAllColumns) == len(userlocationPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLUserlocationUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Userlocation{}
	if err = randomize.Struct(seed, &o, userlocationDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Userlocation struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Userlocation: %s", err)
	}

	count, err := Userlocations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, userlocationDBTypes, false, userlocationPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Userlocation struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Userlocation: %s", err)
	}

	count, err = Userlocations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
